generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Comments {
  Id    String    @id @db.VarChar(255)
  Text  String?   @db.VarChar(500)
  User  String?   @db.VarChar(255)
  Post  String?   @db.VarChar(255)
  Date  DateTime? @db.DateTime(0)
  Posts Posts?    @relation(fields: [Post], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_CommentPost")
  Users Users?    @relation(fields: [User], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_CommentUser")

  @@index([Post], map: "FK_CommentPost")
  @@index([User], map: "FK_CommentUser")
}

model Friendships {
  Id                             String  @id @db.VarChar(255)
  User1                          String? @db.VarChar(255)
  User2                          String? @db.VarChar(255)
  Users_Friendships_User1ToUsers Users?  @relation("Friendships_User1ToUsers", fields: [User1], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Friendship_User1")
  Users_Friendships_User2ToUsers Users?  @relation("Friendships_User2ToUsers", fields: [User2], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Friendship_User2")

  @@index([User1], map: "FK_Friendship_User1")
  @@index([User2], map: "FK_Friendship_User2")
}

model Post_Likes {
  Id    String  @id @db.VarChar(255)
  User  String? @db.VarChar(255)
  Post  String? @db.VarChar(255)
  Posts Posts?  @relation(fields: [Post], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Post")
  Users Users?  @relation(fields: [User], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_PostUser")

  @@index([Post], map: "FK_Post")
  @@index([User], map: "FK_PostUser")
}

model Posts {
  Id         String       @id @db.VarChar(255)
  Text       String?      @db.VarChar(500)
  UserId     String?      @db.VarChar(255)
  Date       DateTime?    @db.DateTime(0)
  Users      Users?       @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Post_UserId")
  Comments   Comments[]
  Post_Likes Post_Likes[]

  @@index([UserId], map: "FK_Post_UserId")
}

model Users {
  Id                                               String            @id @db.VarChar(255)
  DisplayName                                      String?           @db.VarChar(255)
  Email                                            String?           @db.VarChar(255)
  Password                                         String            @db.VarChar(255)
  ProfileImg                                       String?           @db.VarChar(255)
  Comments                                         Comments[]
  Friendships_Friendships_User1ToUsers             Friendships[]     @relation("Friendships_User1ToUsers")
  Friendships_Friendships_User2ToUsers             Friendships[]     @relation("Friendships_User2ToUsers")
  Post_Likes                                       Post_Likes[]
  Posts                                            Posts[]
  Profile_Info                                     Profile_Info[]
  friend_requests_UsersTofriend_requests_From_uuid friend_requests[] @relation("UsersTofriend_requests_From_uuid")
  friend_requests_UsersTofriend_requests_To_uuid   friend_requests[] @relation("UsersTofriend_requests_To_uuid")
}

model friend_requests {
  Id                                     String   @id @db.VarChar(255)
  From_uuid                              String   @db.VarChar(255)
  To_uuid                                String   @db.VarChar(255)
  Is_Accepted                            Boolean? @db.Bit(1)
  Users_UsersTofriend_requests_From_uuid Users    @relation("UsersTofriend_requests_From_uuid", fields: [From_uuid], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "friend_requests_ibfk_1")
  Users_UsersTofriend_requests_To_uuid   Users    @relation("UsersTofriend_requests_To_uuid", fields: [To_uuid], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "friend_requests_ibfk_2")

  @@index([From_uuid], map: "From_uuid")
  @@index([To_uuid], map: "To_uuid")
}

model Profile_Info {
  Id     String  @id @db.VarChar(255)
  UserId String? @db.VarChar(255)
  Bio    String? @db.VarChar(500)
  Users  Users?  @relation(fields: [UserId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER")

  @@index([UserId], map: "FK_USER")
}
